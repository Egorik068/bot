from ast import Await
from cgitb import text
from email import message, utils
from email.policy import default
from itertools import count
import logging
from tabnanny import check
from types import NoneType
from typing import final
from xml.dom import ValidationErr
from aiogram import Bot, Dispatcher, executor, types
import time
import datetime
import aiogram
from click import command
from numpy import integer
from DBusers import SQLitedb
from DATETIME import date_time
import random
from ADMINS import ADMcommand
import config
import requests
from bs4 import BeautifulSoup as BS
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import keyboard as inl

from aiohttp import ContentTypeError

#
slot_emoji = ['1', '2']

#
random_win = [2, 1.25, 1.5, 1.75]

#–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –¥–∞—Ç–∏
dtime = date_time()

#–ø—ñ–¥–∫–ª—é—á–∞—î –ë–î
db = SQLitedb('users.db')

#–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î –∞–¥–º—ñ–Ω—ñ–≤
admbd = ADMcommand('users.db')

#–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±–æ—Ç–∞
bot = Bot(token='5370746338:AAFz2g5B_HTHMVFVmsOOzvpmSKRDnz3KaQQ')

#–î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è  –±–æ—Ç–∞
dp = Dispatcher(bot) 

#–î–æ–¥–∞—î –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞ —á–∞—Ç–∞
@dp.message_handler(content_types=['new_chat_members'])
async def new_members_handler(message: types.Message):
    new_member = message.new_chat_members
    new_member = new_member[0].id
    if not db.check_user(new_member):
        db.add_to_db(new_member)
    await bot.send_message(message.chat.id, new_member)

#–ø—Ä–∏ –∫–æ–º–∞–Ω–¥—ñ /start –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —é–∑–µ—Ä –≤ –ë–î, —è–∫—â–æ –Ω–µ–º–∞—î —Ç–æ –π–æ–≥–æ –¥–æ–¥–∞—î
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    add_time = dtime.time(time.localtime())
    username = message.from_user.username
    firstname = message.from_user.first_name
    if not db.check_nick(user_id):
        db.add_to_db(user_id, username, firstname)
        db.add_datetime(add_time, user_id)
    await bot.send_message(message.chat.id, f'''
üë®‚Äçüîß–ü—Ä–∏–≤—ñ—Ç [{firstname}](tg://user?id={user_id})

ü§ñ–º–µ–Ω–µ –∑–≤–∞—Ç–∏ –ü–µ—Ç—å–∫–∞ 

üòä–ú–æ—è –≥–æ–ª–æ–≤–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–≥–ª—è–¥—É–≤–∞—Ç–∏ –∑–∞ –≤–∞—à–∏–º —á–∞—Ç–æ–º!!

üìù–Ω–∞–ø–∏—Å–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É `–î–æ–ø–æ–º–æ–≥–∞`, —Ç–∏ –º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –≤—Å—ñ –º–æ—ó –∫–æ–º–∞–Ω–¥–∏''', parse_mode='Markdown')

@dp.message_handler(content_types='text')
async def rp_commands(message: types.Message):
    try:
        if '–ü–æ–≥–æ–¥–∞ ' in message.text:
            
            city = message.text[7:]
            split = city.split()
            city_ok = '-'.join(split)
        
            url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok
            r = requests.get(url)
            html = BS(r.content, 'lxml')

            for el in html.select('#content'):
                t_min = el.select('.temperature .min')[0].text
                t_max = el.select('.temperature .max')[0].text
                min_text = el.select('.weatherIco')[0]['title']
                day_pars = el.select('.day-link')[0].text
                month_pars = el.select('.date')[0].text
                day_name = el.select('.month')[0].text
                zaraz = el.select('.imgBlock .today-temp')[0].text
                witer_rano = el.select('.gray .p4')[2].text
                witer_den = el.select('.gray .p5')[2].text
                witer_vechir = el.select('.gray .p7')[2].text
                dosch_rano = el.select('tr .p3')[7].text
                dosch_den = el.select('tr .p5')[7].text
                dosch_vechir = el.select('tr .p7')[7].text
                
            await message.reply(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {t_min} | {t_max}\n‚õ±Ô∏è–ó–∞—Ä–∞–∑: {zaraz}\n‚òÄÔ∏è–†–∞–Ω–æ:\n–í—ñ—Ç–µ—Ä | {witer_rano} –º/—Å–µ–∫\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\nüå§Ô∏è–î–µ–Ω—å:\n–í—ñ—Ç–µ—Ä | {witer_den} –º/—Å–µ–∫\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n‚≠ê–í–µ—á—ñ—Ä:\n–í—ñ—Ç–µ—Ä | {witer_vechir} –º/—Å–µ–∫\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%', reply_markup=inl.mainMenu)
            
            @dp.callback_query_handler(text='right_weather')
            async def weather_right(query: types.CallbackQuery):
                today = datetime.date.today()
                zavtra = today + datetime.timedelta(days=2)
                dt_zavtra = zavtra.strftime('%Y-%m-%d')
                url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                r = requests.get(url)
                html = BS(r.content, 'lxml')
                for el in html.select('#content'):
                    t_min = el.select('.temperature .min')[1].text
                    t_max = el.select('.temperature .max')[1].text
                    min_text = el.select('.weatherIco')[1]['title']
                    day_pars = el.select('.day-link')[1].text
                    month_pars = el.select('.date')[1].text
                    day_name = el.select('.month')[1].text
                    witer_rano = el.select('.gray .p4')[2].text
                    witer_den = el.select('.gray .p6')[2].text
                    witer_vechir = el.select('.gray .p8')[2].text
                    dosch_rano = el.select('tr .p4')[7].text
                    dosch_den = el.select('tr .p6')[7].text
                    dosch_vechir = el.select('tr .p8')[7].text
                    
                await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {t_min} | {t_max}\n‚òÄÔ∏è–†–∞–Ω–æ:\n–í—ñ—Ç–µ—Ä | {witer_rano} –º/—Å–µ–∫\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\nüå§Ô∏è–î–µ–Ω—å:\n–í—ñ—Ç–µ—Ä | {witer_den} –º/—Å–µ–∫\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n‚≠ê–í–µ—á—ñ—Ä:\n–í—ñ—Ç–µ—Ä | {witer_vechir} –º/—Å–µ–∫\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%', reply_markup=inl.mainMenu)
                
            @dp.callback_query_handler(text='left_weather')
            async def weather_right(query: types.CallbackQuery):
                today = datetime.date.today()
                pisla_zavtra = today + datetime.timedelta(days=3)
                dt_zavtra = pisla_zavtra.strftime('%Y-%m-%d')
                url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                r = requests.get(url)
                html = BS(r.content, 'lxml')
                for el in html.select('#content'):
                    t_min = el.select('.temperature .min')[2].text
                    t_max = el.select('.temperature .max')[2].text
                    min_text = el.select('.weatherIco')[2]['title']
                    day_pars = el.select('.day-link')[2].text
                    month_pars = el.select('.date')[2].text
                    day_name = el.select('.month')[2].text
                    
                await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {t_min} | {t_max}', reply_markup=inl.mainMenu)
            
            @dp.callback_query_handler(text='thourbtn')
            async def weather_right(query: types.CallbackQuery):
                today = datetime.date.today()
                zavtra = today + datetime.timedelta(days=4)
                dt_zavtra = zavtra.strftime('%Y-%m-%d')
                url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                r = requests.get(url)
                html = BS(r.content, 'lxml')
                for el in html.select('#content'):
                    t_min = el.select('.temperature .min')[3].text
                    t_max = el.select('.temperature .max')[3].text
                    min_text = el.select('.weatherIco')[3]['title']
                    day_pars = el.select('.day-link')[3].text
                    month_pars = el.select('.date')[3].text
                    day_name = el.select('.month')[3].text
                    
                await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {t_min} | {t_max}', reply_markup=inl.mainMenu)
            
            @dp.callback_query_handler(text='fivebtn')
            async def weather_right(query: types.CallbackQuery):
                today = datetime.date.today()
                zavtra = today + datetime.timedelta(days=5)
                dt_zavtra = zavtra.strftime('%Y-%m-%d')
                url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                r = requests.get(url)
                html = BS(r.content, 'lxml')
                for el in html.select('#content'):
                    t_min = el.select('.temperature .min')[4].text
                    t_max = el.select('.temperature .max')[4].text
                    min_text = el.select('.weatherIco')[4]['title']
                    day_pars = el.select('.day-link')[4].text
                    month_pars = el.select('.date')[4].text
                    day_name = el.select('.month')[4].text
                    
                await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {t_min} | {t_max}', reply_markup=inl.mainMenu)
            
            @dp.callback_query_handler(text='sixbtn')
            async def weather_right(query: types.CallbackQuery):
                today = datetime.date.today()
                zavtra = today + datetime.timedelta(days=6)
                dt_zavtra = zavtra.strftime('%Y-%m-%d')
                url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                r = requests.get(url)
                html = BS(r.content, 'lxml')
                for el in html.select('#content'):
                    t_min = el.select('.temperature .min')[5].text
                    t_max = el.select('.temperature .max')[5].text
                    min_text = el.select('.weatherIco')[5]['title']
                    day_pars = el.select('.day-link')[5].text
                    month_pars = el.select('.date')[5].text
                    day_name = el.select('.month')[5].text
                    
                await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {t_min} | {t_max}', reply_markup=inl.mainMenu)
            
            @dp.callback_query_handler(text='twobtn')
            async def weather_right(query: types.CallbackQuery):
                today = datetime.date.today()
                zavtra = today + datetime.timedelta(days=1)
                dt_zavtra = zavtra.strftime('%Y-%m-%d')
                url = 'https://ua.sinoptik.ua/–ø–æ–≥–æ–¥–∞-' + city_ok + '/' + dt_zavtra
                r = requests.get(url)
                html = BS(r.content, 'lxml')
                for el in html.select('#content'):
                    t_min = el.select('.temperature .min')[0].text
                    t_max = el.select('.temperature .max')[0].text
                    min_text = el.select('.weatherIco')[0]['title']
                    day_pars = el.select('.day-link')[0].text
                    month_pars = el.select('.date')[0].text
                    day_name = el.select('.month')[0].text
                    zaraz = el.select('.imgBlock .today-temp')[0].text
                    witer_rano = el.select('.gray .p4')[2].text
                    witer_den = el.select('.gray .p5')[2].text
                    witer_vechir = el.select('.gray .p7')[2].text
                    dosch_rano = el.select('tr .p3')[7].text
                    dosch_den = el.select('tr .p5')[7].text
                    dosch_vechir = el.select('tr .p7')[7].text
                    
                await query.message.edit_text(f'üìÖ–î–∞—Ç–∞: {day_pars} | {month_pars} | {day_name}\nüìù–ú–∞–ª–µ–Ω—å–∫–∏–π –æ–ø–∏—Å: {min_text}\nüå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {t_min} | {t_max}\n‚õ±Ô∏è–ó–∞—Ä–∞–∑: {zaraz}\n‚òÄÔ∏è–†–∞–Ω–æ:\n–í—ñ—Ç–µ—Ä | {witer_rano} –º/—Å–µ–∫\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_rano}%\nüå§Ô∏è–î–µ–Ω—å:\n–í—ñ—Ç–µ—Ä | {witer_den} –º/—Å–µ–∫\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_den}%\n‚≠ê–í–µ—á—ñ—Ä:\n–í—ñ—Ç–µ—Ä | {witer_vechir} –º/—Å–µ–∫\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ | {dosch_vechir}%', reply_markup=inl.mainMenu)
            
        if message.text == '–î–æ–ø–æ–º–æ–≥–∞' or message.text == '–¥–æ–ø–æ–º–æ–≥–∞':
            user_id = message.from_user.id
            await message.reply(f'''
[üìí](tg://user?id={user_id})–ù–∞ –¥–∞–Ω–Ω–∏–π –º–æ–º–µ–Ω—Ç –≤ –º–µ–Ω–µ —î —Ç–∞–∫—ñ –∫–æ–º–∞–Ω–¥–∏

üëå–û—Å–Ω–æ–≤–Ω—ñ:
1) +–Ω–∏–∫ | +–Ω—ñ–∫
2) –î–∞—Ç–∞
3) –±–∞–Ω | –∫–∏–∫ | –º—É—Ç - —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å —é–∑–∞—Ç–∏
4) !–∞–¥–º—ñ–Ω–∫–∞ [—Ä–µ–ø–ª–∞–π –¥–æ —é–∑–µ—Ä–∞]
5) –ü–æ–≥–æ–¥–∞ [–º—ñ—Å—Ç–æ] | –ø—Ä–∏–∫–ª–∞–¥: –ü–æ–≥–æ–¥–∞ –ª—å–≤—ñ–≤
6) +–æ–ø–∏—Å 

üòä–†–ü:
1) `–¥–∞—Ç–∏ –ø—ñ–¥—Å—Ä–∞—á–Ω–∏–∫–∞`
2) `–∑—ó—Å—Ç–∏`
3) `–ø–æ–≥–ª–∞–¥–∏—Ç–∏`
4) `–ø–æ—Ü—ñ–ª—É–≤–∞—Ç–∏`
5) `–∫–æ—Ö–∞—Ç–∏—Å—è`
6) `–≤–±–∏—Ç–∏`
7) `–∫—É—Å—å`
8) `—Å–ø–∞–ª–∏—Ç–∏`
9) `—Å–∏–ª—å–Ω–æ –≤–¥–∞—Ä–∏—Ç–∏`
10) `—Ü—å–æ–º`
''', parse_mode='Markdown')
        if message.text == '–•—Ç–æ —è':
            my_user_id = message.from_user.id
            new_opis_check = db.check_opis(my_user_id)
            await bot.send_message(message.chat.id, 'üë§ –ú—ñ–π –Ω—ñ–∫: ' + db.check_nick(my_user_id)[0] + f'\n\n‚≠êÔ∏è –°—Ç–∞—Ç—É—Å –∞–¥–º—ñ–Ω–∫–∏: {admbd.check_adm(my_user_id)[0]}\nüí¨ –ú—ñ–π –æ–ø–∏—Å: ' + new_opis_check[0] + '\n\nüìÖ –í–ø–µ—Ä—à–µ –∑ –Ω–∞–º–∏ –ø–æ—è–≤–∏–≤—Å—è –≤: ' + db.check_datetime(my_user_id)[0])
        if '+–Ω—ñ–∫ ' in message.text or '+–Ω–∏–∫ ' in message.text:
            user_id = message.from_user.id
            nickname = message.text[5:]
            db.nick_user(nickname, user_id)
            new_nick_check = db.check_nick(user_id)
            await bot.send_message(message.chat.id, 'üìí–¢–≤—ñ–π –Ω–æ–≤–∏–π –Ω—ñ–∫: ' + new_nick_check[0])
        if '+–æ–ø–∏—Å ' in message.text:
            user_id = message.from_user.id
            nickname = message.text[6:]
            db.opis_user(nickname, user_id)
            new_opis_check = db.check_opis(user_id)
            await bot.send_message(message.chat.id, 'üìù–¢–≤—ñ–π –Ω–æ–≤–∏–π –æ–ø–∏—Å: ' + new_opis_check[0])
        if message.text == '—Ç–≤—ñ–π –∞–π–¥—ñ' or message.text == '–¢–≤—ñ–π –∞–π–¥—ñ':
            youid = message.reply_to_message.from_user.id
            await bot.send_message(message.chat.id, youid)  
        if message.text.lower() == '–¥–∞—Ç–∞':
            loc = time.localtime()
            locd = time.strftime('%H', loc)
            locdt = time.strftime('%M', loc)
            week = time.strftime('%A', loc)
            month = time.strftime('%B', loc)
            chislo = time.strftime('%d', loc)
            fulldata = time.strftime('%d:%m:%Y', loc)
            await bot.send_message(message.chat.id, (f'‚åöÔ∏è –ß–∞—Å: {locd}:{locdt}\n‚è∞ –î–µ–Ω—å: {dtime.transweek(week)}\nüìÖ –î–∞—Ç–∞: {chislo} | {dtime.transmonth(month)}\n‚è≥ –§—É–ª–ª –¥–∞—Ç–∞: {fulldata}'))
        if message.text == '–ú—ñ–π –∞–π–¥—ñ' or message.text == '–º—ñ–π –∞–π–¥—ñ':
            #–í–µ—Ä—Ç–∞—î –∞–π–¥—ñ —Ç–æ–≥–æ —Ö—Ç–æ —Ç–æ –Ω–∞–ø–∏—Å–∞–≤
            await bot.send_message(message.chat.id, f'`{message.from_user.id}`', parse_mode='Markdown')
        if message.text == '–ú—ñ–π –Ω—ñ–∫' or message.text == '–º—ñ–π –Ω—ñ–∫':
            #–í–µ—Ä—Ç–∞—î –Ω—ñ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑ –±–¥ 
            user_id = message.from_user.id
            user_firstname = message.from_user.first_name
            nick_us = db.check_nick(user_id)[0]
            await message.reply(f'üë§–ù—ñ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ [{user_firstname}](tg://user?id={user_id}) ' + nick_us, parse_mode='Markdown')
        if message.text == '–¢–≤—ñ–π –Ω—ñ–∫' or message.text == '—Ç–≤—ñ–π –Ω—ñ–∫':
            #–í–µ—Ä—Ç–∞—î –Ω—ñ–∫ –∑–∞—Ä–µ–ø–ª–µ—î–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑ –±–¥ 
            user_id_reply_to = message.reply_to_message.from_user.id
            user_firstname_reply = message.reply_to_message.from_user.first_name
            user_id_reply_to_to = message.reply_to_message.from_user.id
            nick_us_reply = db.check_nick(user_id_reply_to)[0]
            await bot.send_message(message.chat.id, f'üë§–ù—ñ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ [{user_firstname_reply}](tg://user?id={user_id_reply_to_to}) ' + nick_us_reply, parse_mode='Markdown')
        if message.text == '–ê–π–¥—ñ —á–∞—Ç–∞':
            #–≤–µ—Ä—Ç–∞—î –∞–π–¥—ñ —á–∞—Ç–∞
            await message.reply(f'`{message.chat.id}`', parse_mode='Markdown')
        if message.text == '–õ–∏–≤':
            #–±–æ—Ç –ª—ñ–≤–∞—î –∑ –≥—Ä—É–ø–ø–∏
            await bot.leave_chat(message.chat.id)
        if message.reply_to_message:
            add_time = dtime.time(time.localtime())
            user_id_reply = message.reply_to_message.from_user.id
            firstname_reply = message.reply_to_message.from_user.first_name
            username_reply = message.reply_to_message.from_user.username
            if not db.check_id_bool(user_id_reply):
                db.add_to_db(user_id_reply, username_reply, firstname_reply)
                db.add_datetime(add_time, user_id_reply)
                
            if db.check_nick(user_id_reply) == None:
                db.nick_user(firstname_reply, user_id_reply)
                
            username = message.from_user.username
            user_id = message.from_user.id
            nick_first_user = db.check_nick(user_id)[0]
            b = message.from_user.id
            d = message.reply_to_message.from_user.id
            nick_two_user = db.check_nick(d)[0]
            opis_rp = message.text
            adm_check_adm = admbd.check_adm(d)[0]
            check_adm = admbd.check_adm(message.from_user.id)[0]
            if message.text == '!–∞–¥–º—ñ–Ω–∫–∞':
                if check_adm >= 1:
                    if adm_check_adm == 1:
                        admbd.plus_adm(d)
                        await message.answer(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{nick_two_user}](tg://user?id={d})\n‚ûï–ü–æ–ª—É—á–∏–≤ –¥–æ—Å—Ç—É–ø –¥–æ –ê–¥–º—ñ–Ω–∫–∏\n‚ö™–ê–¥–º—ñ–Ω–∫–∞: 1 —Ä—ñ–≤–Ω—è', parse_mode='Markdown')
                    else:
                        await message.reply('–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
                else:
                    await message.reply('–í —Ç–µ–±–µ –Ω–µ–º–∞ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏(')

            if message.text == '!!–∞–¥–º—ñ–Ω–∫–∞':
                if check_adm >= 1:
                    if adm_check_adm == 2:
                        admbd.plus_two_adm(d)
                        await message.answer(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{nick_two_user}](tg://user?id={d})\n‚ûï–ü–æ–ª—É—á–∏–≤ –¥–æ—Å—Ç—É–ø –¥–æ –ê–¥–º—ñ–Ω–∫–∏\n‚ö™–ê–¥–º—ñ–Ω–∫–∞: 2 —Ä—ñ–≤–Ω—è', parse_mode='Markdown')
                    else:
                        await message.reply('–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
                else:
                    await message.reply('–í —Ç–µ–±–µ –Ω–µ–º–∞ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏(')

            if message.text == '!!!–∞–¥–º—ñ–Ω–∫–∞':
                if check_adm >= 1:
                    if adm_check_adm == 3:
                        admbd.plus_three_adm(d)
                        await message.answer(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{nick_two_user}](tg://user?id={d})\n‚ûï–ü–æ–ª—É—á–∏–≤ –¥–æ—Å—Ç—É–ø –¥–æ –ê–¥–º—ñ–Ω–∫–∏\n‚ö™–ê–¥–º—ñ–Ω–∫–∞: 3 —Ä—ñ–≤–Ω—è', parse_mode='Markdown')
                    else:
                        await message.reply('–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
                else:
                    await message.reply('–í —Ç–µ–±–µ –Ω–µ–º–∞ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏(')

            if message.text == '!!!!–∞–¥–º—ñ–Ω–∫–∞':
                if check_adm >= 1:
                    if adm_check_adm == 4:
                        admbd.plus_four_adm(d)
                        await message.answer(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{nick_two_user}](tg://user?id={d})\n‚ûï–ü–æ–ª—É—á–∏–≤ –¥–æ—Å—Ç—É–ø –¥–æ –ê–¥–º—ñ–Ω–∫–∏\n‚ö™–ê–¥–º—ñ–Ω–∫–∞: 4 —Ä—ñ–≤–Ω—è', parse_mode='Markdown')
                    else:
                        await message.reply('–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
                else:
                    await message.reply('–í —Ç–µ–±–µ –Ω–µ–º–∞ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏(')

            if message.text == '!!!!!–∞–¥–º—ñ–Ω–∫–∞':
                if check_adm >= 1:
                    if adm_check_adm == 5:
                        admbd.plus_five_adm(d)
                        await message.answer(f'üë§–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á [{nick_two_user}](tg://user?id={d})\n‚ûï–ü–æ–ª—É—á–∏–≤ –¥–æ—Å—Ç—É–ø –¥–æ –ê–¥–º—ñ–Ω–∫–∏\n‚ö™–ê–¥–º—ñ–Ω–∫–∞: 5 —Ä—ñ–≤–Ω—è', parse_mode='Markdown')
                    else:
                        await message.reply('–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
                else:
                    await message.reply('–í —Ç–µ–±–µ –Ω–µ–º–∞ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏(')

            if message.text.lower() == '–∑—ó—Å—Ç–∏':
                await bot.send_message(message.chat.id, f"üòÖüòã| [{nick_first_user}](tg://user?id={b}) –∑'—ó–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
        
            if message.text.lower() == "–ø–æ–≥–ª–∞–¥–∏—Ç–∏":
                await bot.send_message(message.chat.id, f"ü•∫ü§≠| [{nick_first_user}](tg://user?id={b}) –ø–æ–≥–ª–∞–¥–∏–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
            
            if message.text.lower() == "–≤–±–∏—Ç–∏":
                await bot.send_message(message.chat.id, f"üò°üî™| [{nick_first_user}](tg://user?id={b}) –≤–±–∏–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
                        
            if message.text.lower() == "–≤–¥–∞—Ä–∏—Ç–∏":
                await bot.send_message(message.chat.id, f"üò°üëéüèø| [{nick_first_user}](tg://user?id={b}) –≤–¥–∞—Ä–∏–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
                        
            if message.text.lower() == "–ø–æ—Ü—ñ–ª—É–≤–∞—Ç–∏":
                await bot.send_message(message.chat.id, f"üòèüòò| [{nick_first_user}](tg://user?id={b}) –ø–æ—Ü—ñ–ª—É–≤–∞–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
                        
            if message.text.lower() == "–∫—É—Å—å":
                await bot.send_message(message.chat.id, f"üòã| [{nick_first_user}](tg://user?id={b}) –∫—É—Å—å–Ω—É–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
            
            if message.text.lower() == "—Å–ø–∞–ª–∏—Ç–∏":
                await bot.send_message(message.chat.id, f"ü§¨üî•| [{nick_first_user}](tg://user?id={b}) —Å–ø–∞–ª–∏–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
            
            if message.text.lower() == "—Å–∏–ª—å–Ω–æ –≤–¥–∞—Ä–∏—Ç–∏":
                await bot.send_message(message.chat.id, f"üòàüëä| [{nick_first_user}](tg://user?id={b}) –¥—É–∂–µ —Å–∏–ª—å–Ω–æ –≤–¥–∞—Ä–∏–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')    
            
            if message.text.lower() == "–∫–æ—Ö–∞—Ç–∏—Å—è":
                await bot.send_message(message.chat.id, f"ü•µ‚ù§Ô∏è| [{nick_first_user}](tg://user?id={b}) –∂–æ—Å—Ç–∫–æ –∫–æ—Ö–∞—î—Ç—å—Å—è –∑ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
        
            if message.text.lower() == "—Ü—å–æ–º":
                await bot.send_message(message.chat.id, f"üíìüå∏| [{nick_first_user}](tg://user?id={b}) –ø–æ—Ü—å–æ–º–∞–≤ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
                
            if message.text.lower() == '–¥–∞—Ç–∏ –ø—ñ–¥—Å—Ä–∞—á–Ω–∏–∫–∞':
                await bot.send_message(message.chat.id, f"ü¶∂‚ò∫Ô∏è| [{nick_first_user}](tg://user?id={b}) –¥–∞–≤ –ø—ñ–¥—Å—Ä–∞—á–Ω–∏–∫–∞ [{nick_two_user}](tg://user?id={d})", parse_mode='Markdown')
    except TypeError:
        add_time = dtime.time(time.localtime())
        user_id = message.from_user.id
        username = message.from_user.username
        firstname = message.from_user.first_name
        if not db.check_id_bool(user_id):
            db.add_to_db(user_id, username, firstname)
            db.add_datetime(add_time, user_id)
        
        if db.check_nick(user_id) == None:
            db.nick_user(firstname, user_id)
    except UnboundLocalError:
        await message.reply('–¢–∞–∫–æ–≥–æ –º—ñ—Å—Ç–∞ –Ω–µ —ñ—Å–Ω—É—î')
    
        
if __name__ == '__main__':
    #–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
